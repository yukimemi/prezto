# =============================================================================
# File        : zshrc
# Author      : yukimemi
# Last Change : 2016/05/29 09:44:42.
# =============================================================================

# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

#######################################################################################################
# Basic {{{1
# LANG
export LANG=ja_JP.UTF-8
export LC_CTYPE="ja_JP.UTF-8"

# right prompt
function pyenv_info {
    if which pyenv > /dev/null 2>&1; then
        pyenv version | sed -e 's/ .*//'
    fi
}
function rbenv_info {
    if which rbenv > /dev/null 2>&1; then
        rbenv version | sed -e 's/ .*//'
    fi
}
function ndenv_info {
    if which ndenv > /dev/null 2>&1; then
        ndenv version | sed -e 's/ .*//'
    fi
}
function goenv_info {
    if which goenv > /dev/null 2>&1; then
        goenv version | sed -e 's/ .*//'
    fi
}
RPROMPT+='  [$(pyenv_info)] ($(rbenv_info)) <$(ndenv_info)> {$(goenv_info)}'

# compile zshrc
if [ ! -f ~/.zshrc.zwc -o ~/.zshrc -nt ~/.zshrc.zwc ]; then
    zcompile ~/.zshrc
fi


#######################################################################################################
# key bind {{{1
#bindkey -v

# zsh vi key command line stack - Qiita
# http://qiita.com/items/1f2c7793944b1f6cc346
show_buffer_stack() {
    POSTDISPLAY="
    stack: $LBUFFER"
    zle push-line-or-edit
}
zle -N show_buffer_stack
setopt noflowcontrol
bindkey '^Q' show_buffer_stack

# move at hjkl on menu select
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char

# history backward search
# autoload -Uz history-search-end
# zle -N history-beginning-search-backward-end history-search-end
# zle -N history-beginning-search-forward-end history-search-end
# bindkey "" history-beginning-search-backward-end
# bindkey "" history-beginning-search-forward-end


#######################################################################################################
# history {{{1
if [ -d ~/Dropbox ]; then
    HISTFILE=~/Dropbox/.zsh_history
else
    HISTFILE=~/.zsh_history
fi

setopt share_history
setopt append_history
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_save_no_dups
setopt extended_history
setopt hist_ignore_space
setopt hist_verify
[ ! -d ~/.zsh/cache ] && mkdir -p ~/.zsh/cache
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path ~/.zsh/cache


#######################################################################################################
# alias {{{1
# setting for OS type
case "${OSTYPE}" in
    freebsd*|darwin*)
        alias ls='ls --color=auto'
        #alias vim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim "$@"'
        alias empty-trash='sudo /bin/rm -rf ~/.Trash/*; sudo /bin/rm -rf ~/.Trash/.*'
        alias shitamplayer='mplayer -fixed-vo -framedrop -ontop -geometry 100%:100%'
        alias vlc='open -a VLC'
        alias screensaver='open /System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app'
        alias nw="~/Applications/node-webkit.app/Contents/MacOS/node-webkit"
        alias mplayerx='open -a MplayerX'
        ;;
    linux*|cygwin)
        alias ls='ls --color=auto'
        alias open=gnome-open
        alias tmux='tmux -2'
        ;;
esac

# alias rm='gomi'
alias vimfiler='vim -c VimFilerDouble'
alias mvimfiler='mvim -c VimFilerDouble'
alias vimshell='vim -c VimShell'
alias mvimshell='mvim -c VimShell'
alias tweetvim='vim +TweetVimUserStream'
alias mtweetvim='mvim +TweetVimUserStream'
alias lingrvim='vim +LingrLaunch'
alias j6uil='vim +J6uil'
alias chalice='vim +Chalice'
# alias neobundleupdate='vim +NeoBundleInstall! +q'
alias neobundleupdate='vim -c "Unite neobundle/update -no-start-insert -no-split"'
alias diff=colordiff
# alias mv='mv -iv'
# alias cp='cp -iv'
alias ll='ls -lh'
alias lla='ls -al'
alias exifany="exiftool '-FileName < CreateDate' -d /Volumes/new/backup/any/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.*"
alias exifMov="exiftool '-FileName < CreateDate' -d /Volumes/new/backup/Mov/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(MOV|mov)"
alias exifJpg="exiftool '-FileName < CreateDate' -d /Volumes/new/backup/Photos/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(JPG|jpg)"
alias exifRecCreateDate="exiftool -r '-FileName < CreateDate' -d /Volumes/new/backup/Photos/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e ."
alias exifModifyJpg="exiftool '-FileName < FileModifyDate' -d /Volumes/new/backup/IMG/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(JPG|jpg)"
alias exifRecFileModifyDate="exiftool -r '-FileName < FileModifyDate' -d /Volumes/new/backup/Photos/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e ."
alias exifPng="exiftool '-FileName < FileModifyDate' -d /Volumes/new/backup/Photos/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(png|PNG)"
alias exifM2ts="exiftool '-FileName < DateTimeOriginal' -d /Volumes/new/backup/m2ts/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e *.(m2ts|M2TS)"
alias exifRecDateTimeOriginal="exiftool -r '-FileName < DateTimeOriginal' -d /Volumes/new/backup/m2ts/%Y-%m/%Y-%m-%d_%H-%M-%S%%-c.%%e ."

alias ghl='ghq list -p | p cd'
alias gho='ghq list -p | p gh-open'

alias pvim='find . -type f | p vim'
alias pcd='find . -type d | p cd'
alias pk=peco-proc
alias vcd='cd $(pecrant dir)'

# global alias
alias -g L=' | lv'
alias -g G=' | grep'
alias -g P=' | peco'

#######################################################################################################
# function {{{1
function chpwd() { ls -F }

#function google() {# {{{
    #local str opt
    #if [ $ != 0 ]; then
        #for i in $*; do
            #str="$str+$i"
        #done
        #str=`echo $str | sed 's/^\+//'`
        #opt='search?num=50&hl=ja&lr=lang_ja'
        #opt="${opt}&q=${str}"
    #fi
    #w3m http://www.google.co.jp/$opt
#}

function alc() {# {{{
    if [ $ != 0 ]; then
        w3m "http://eow.alc.co.jp/$*/UTF-8/?ref=sa"
    else
        w3m "http://www.alc.co.jp/"
    fi
}

cdup() {# {{{
    if [ -z "$BUFFER" ]; then
        echo
        cd ..
        #chpwd
        if type precmd > /dev/null 2>&1; then
            precmd
        fi
        local precmd_func
        for precmd_func in $precmd_functions; do
            $precmd_func
        done
        zle reset-prompt
    else
        zle self-insert '^'
    fi
}
zle -N cdup
bindkey '^^' cdup

# print NORMAL or INSERT mode# {{{
:<<'#COMMENT'
readuntil () {
    typeset a
    while [ "$a" != "$1" ]
    do
        read -E -k 1 a
    done
}

#
# If the $SHOWMODE variable is set, displays the vi mode, specified by
# the $VIMODE variable, under the current command line.
#
# Arguments:
#
#   1 (optional): Beyond normal calculations, the number of additional
#   lines to move down before printing the mode.  Defaults to zero.
#
showmode() {
    typeset movedown
    typeset row

    # Get number of lines down to print mode
    movedown=$(($(echo "$RBUFFER" | wc -l) + ${1:-0}))

    # Get current row position
    echo -n "\e[6n"
    row="${${$(readuntil R)#*\[}%;*}"

    # Are we at the bottom of the terminal?
    if [ $((row+movedown)) -gt "$LINES" ]
    then
        # Scroll terminal up one line
        echo -n "\e[1S"

        # Move cursor up one line
        echo -n "\e[1A"
    fi

    # Save cursor position
    echo -n "\e[s"

    # Move cursor to start of line $movedown lines down
    echo -n "\e[$movedown;E"

    # Change font attributes
    echo -n "\e[1m"

    # Has a mode been set?
    if [ -n "$VIMODE" ]
    then
        # Print mode line
        echo -n "-- $VIMODE -- "
    else
        # Clear mode line
        echo -n "\e[0K"
    fi

    # Restore font
    echo -n "\e[0m"

    # Restore cursor position
    echo -n "\e[u"
}

clearmode() {
    VIMODE= showmode
}

#
# Temporary function to extend built-in widgets to display mode.
#
#   1: The name of the widget.
#
#   2: The mode string.
#
#   3 (optional): Beyond normal calculations, the number of additional
#   lines to move down before printing the mode.  Defaults to zero.
#
makemodal () {
    # Create new function
    eval "$1() { zle .'$1'; ${2:+VIMODE='$2'}; showmode $3 }"

    # Create new widget
    zle -N "$1"
}

# Extend widgets
makemodal vi-add-eol           INSERT
makemodal vi-add-next          INSERT
makemodal vi-change            INSERT
makemodal vi-change-eol        INSERT
makemodal vi-change-whole-line INSERT
makemodal vi-insert            INSERT
makemodal vi-insert-bol        INSERT
makemodal vi-open-line-above   INSERT
makemodal vi-substitute        INSERT
makemodal vi-open-line-below   INSERT 1
makemodal vi-replace           REPLACE
makemodal vi-cmd-mode          NORMAL

unfunction makemodal
#COMMENT

# copy to clipboard (require pbcopy on mac and xcel on linux)# {{{
# Example
# % vim mail.txt
# % cat mail.txt C
# copy line from 10 to 15 in the INPUT.txt
# % sed -n '10,15p' INPUT.txt C
if which pbcopy >/dev/null 2>&1 ; then
    # Mac
    alias -g C='| pbcopy'
elif which xsel >/dev/null 2>&1 ; then
    # Linux
    alias -g C='| xsel --input --clipboard'
elif which putclip >/dev/null 2>&1 ; then
    # Cygwin
    alias -g C='| putclip'
fi

# print command under the screen {{{2
if [ "$TERM" = "screen" ]; then
    #     chpwd () { echo -n "_`dirs`\\" }
    preexec() {
        #         see [zsh-workers:13180]
        #         http://www.zsh.org/mla/workers/2000/msg03993.html
        emulate -L zsh
        local -a cmd; cmd=(${(z)2})
        case $cmd[1] in
            fg)
                if (( $#cmd == 1 )); then
                    cmd=(builtin jobs -l %+)
                else
                    cmd=(builtin jobs -l $cmd[2])
                fi
                ;;
            %*)
                cmd=(builtin jobs -l $cmd[1])
                ;;
            cd)
                if (( $#cmd == 2 )); then
                    cmd[1]=$cmd[2]
                fi
                ;&
            *)
                echo -n "k$cmd[1]:t\\"
                return
                ;;
        esac

        local -A jt; jt=(${(kv)jobtexts})

        $cmd >>(read num rest
        cmd=(${(z)${(e):-\$jt$num}})
        echo -n "k$cmd[1]:t\\") 2>/dev/null
    }
fi

gitio()
{
  curl -i http://git.io -F "url=$1" -F "code=$2"
}

############# only mac #########################
# copy Japanese language on pbcopy {{{1
#__CF_USER_TEXT_ENCODING=0x1F5:1:14    # original value
if [ $OSTYPE = "darwin*" ]; then
    __CF_USER_TEXT_ENCODING=0x1F5:0x8000100:14
    export __CF_USER_TEXT_ENCODING
fi

#######################################################################################################
# plugins {{{1
zstyle ':filter-select' case-insensitive yes
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 5000
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

# peco {{{2
function peco-snippets() {
    BUFFER=$(grep -v "^#" ~/.peco-snippets | peco)
    zle clear-screen
}
zle -N peco-snippets

function agvim() {
    if [ "$1" = "" ]; then
        ag . | peco | awk -F : '{system("vim -c " $2 " " "\"" $1 "\"")}'
    else
        ag $@ | peco | awk -F : '{system("vim -c " $2 " " "\"" $1 "\"")}'
    fi
}
function jvvim() {
    if [ "$1" = "" ]; then
        jvgrep . | peco | awk -F : '{system("vim -c " $2 " " "\"" $1 "\"")}'
    else
        jvgrep $@ . | peco | awk -F : '{system("vim -c " $2 " " "\"" $1 "\"")}'
    fi
}
bindkey '^s' peco-snippets

# Use anyframe {{{2
bindkey '^r' anyframe-widget-put-history
bindkey '^@' anyframe-widget-cdr
bindkey '^k' anyframe-widget-kill
bindkey '^b' anyframe-widget-insert-git-branch
bindkey '^f' anyframe-widget-insert-filename
bindkey '^a' anyframe-widget-select-widget

unalias p
function p() {
    peco | while read line
    do
        $@ $line
    done
}


# zplug {{{1
# Check if zplug is installed
if [ ! -d ~/.zplug ]; then
  curl -sL get.zplug.sh | zsh
fi

# Essential
source ~/.zplug/init.zsh

zplug "riywo/anyenv", as:command, use:bin/anyenv
zplug "zimbatm/direnv", hook-build:"make install"
zplug "mollifier/anyframe"
zplug "mollifier/cd-gitroot"
zplug "b4b4r07/enhancd", use:init.sh
zplug "zsh-users/zsh-syntax-highlighting", nice:10
zplug "zsh-users/zsh-history-substring-search"
zplug "junegunn/fzf-bin", as:command, from:gh-r, rename-to:fzf
zplug "peco/peco", as:command, from:gh-r
zplug "b4b4r07/zsh-gomi"
zplug "mattn/files", hook-build:"go get github.com/mattn/files"
zplug "zsh-users/zsh-completions"
zplug "yuroyoro/git-ignore", as:command, rename-to:gi
zplug "b4b4r07/ssh-keyreg", as:command
zplug "b4b4r07/emoji-cli", if:"which jq"
zplug "stedolan/jq", \
    from:gh-r, \
    as:command, \
    rename-to:jq, \
    on:"b4b4r07/emoji-cli"

# Install packages that have not been installed yet
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    else
        echo
    fi
fi

zplug load --verbose

# substring-search
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down

# anyenv {{{1
export ANYENV_ROOT=$ZPLUG_REPOS/riywo/anyenv
eval "$(anyenv init -)"
[ ! -d $ANYENV_ROOT/plugins ] && mkdir -p $ANYENV_ROOT/plugins
[ ! -d $ANYENV_ROOT/plugins/anyenv-update ] && git clone https://github.com/znz/anyenv-update.git $ANYENV_ROOT/plugins/anyenv-update
# pyenv plugins
[ -d $ANYENV_ROOT/envs/pyenv ] && [ ! -d $ANYENV_ROOT/envs/pyenv/plugins/pyenv-virtualenv ] && git clone https://github.com/yyuu/pyenv-virtualenv.git $ANYENV_ROOT/envs/pyenv/plugins/pyenv-virtualenv
# rbenv plugins
[ -d $ANYENV_ROOT/envs/rbenv ] && [ ! -d $ANYENV_ROOT/envs/rbenv/plugins/rbenv-binstubs ] && git clone git://github.com/ianheggie/rbenv-binstubs.git $ANYENV_ROOT/envs/rbenv/plugins/rbenv-binstubs

# direnv {{{1
eval "$(direnv hook zsh)"


#######################################################################################################
#{{{ local conf
if [ -e ~/.zshrc_private ]; then
    source ~/.zshrc_private
fi

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

